
<div class="mb-3">
    <div class="input-group mb-2">
        <input type="text" class="form-control" placeholder="Youtube Video URL" @bind="YoutubeUrl" />
        <button class="btn btn-primary" @onclick="AddYoutubeUrl" disabled="@string.IsNullOrEmpty(YoutubeUrl)">Add Youtube Url</button>
    </div>
    <h6>OR</h6>
    <div class="input-group mb-2">
        <InputFile class="form-control" OnChange="@OnInputFileChange" />
        <label class="input-group-text">Select Image File</label>
    </div>
</div>




<ul class="list-group">
    @foreach (var media in Product.Medias)
    {
        <li class="list-group-item d-flex align-items-center">
            @if (media.ImageId != default)
            {
                <img src="api/images/@media.ImageId" style="max-height: 60px;" />
            }
            else
            {
                <div>
                    @media.YoutubeUrl
                </div>
            }
            <div class="ms-auto">
                <button class="btn btn-danger" @onclick="() => DeleteAsync(media)">Delete</button>
            </div>
        </li>
    }
</ul>



@code {
    [Inject]
    public HttpClient HttpClient { get; set; }

    [Parameter]
    public MProduct Product { get; set; }

    private string YoutubeUrl;

    private async Task AddYoutubeUrl()
    {
        var media = new MProductMedia()
        {
            ProductId = Product.Id,
            YoutubeUrl = YoutubeUrl
        };

        await AddMediaAsync(media);

        YoutubeUrl = null;
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;

        var image = new MImage();

        image.ContentType = imageFile.ContentType;
        image.Name = imageFile.Name;
        image.Content = new byte[imageFile.Size];
        await imageFile.OpenReadStream(50 * 1024 * 1024).ReadAsync(image.Content);

        var response = await HttpClient.PostAsJsonAsync("api/images", image);
        var media = new MProductMedia()
        {
            ProductId = Product.Id,
            ImageId = int.Parse(await response.Content.ReadAsStringAsync())
        };

        await AddMediaAsync(media);
    }

    private async Task AddMediaAsync(MProductMedia media)
    {
        var response = await HttpClient.PostAsJsonAsync("api/products/medias", media);

        Product.Medias.Add(await response.Content.ReadFromJsonAsync<MProductMedia>());
    }


    private async Task DeleteAsync(MProductMedia media)
    {
        await HttpClient.DeleteAsync("api/products/medias/" + media.Id);
        Product.Medias.Remove(media);
    }
}
